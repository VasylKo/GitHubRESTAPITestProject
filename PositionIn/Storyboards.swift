//
// Autogenerated by Natalie - Storyboard Generator Script.
// http://blog.krzyzanowskim.com
//

import UIKit

//MARK: - Storyboards

extension UIStoryboard {
    func instantiateViewController<T: UIViewController where T: IdentifiableProtocol>(type: T.Type) -> T? {
        let instance = type.init()
        if let identifier = instance.storyboardIdentifier {
            return self.instantiateViewControllerWithIdentifier(identifier) as? T
        }
        return nil
    }

}

protocol Storyboard {
    static var storyboard: UIStoryboard { get }
    static var identifier: String { get }
}

struct Storyboards {

    struct Main: Storyboard {

        static let identifier = "Main"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateInitialViewController() -> SidebarViewController {
            return self.storyboard.instantiateInitialViewController() as! SidebarViewController
        }

        static func instantiateViewControllerWithIdentifier(identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier(identifier)
        }

        static func instantiateViewController<T: UIViewController where T: IdentifiableProtocol>(type: T.Type) -> T? {
            return self.storyboard.instantiateViewController(type)
        }

        static func instantiateMainMenuViewController() -> MainMenuViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MainMenuViewController") as! MainMenuViewController
        }

        static func instantiateMapNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MapNavigationController") as! UINavigationController
        }

        static func instantiateMessagingNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MessagingNavigationController") as! UINavigationController
        }

        static func instantiateFiltersNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("FiltersNavigationController") as! UINavigationController
        }

        static func instantiateCreateConversationContainerViewController() -> CreateConversationContainerViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CreateConversationContainerViewController") as! CreateConversationContainerViewController
        }

        static func instantiateBrowseCommunityViewController() -> BrowseCommunityViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseCommunityViewController") as! BrowseCommunityViewController
        }

        static func instantiateBrowseVolunteerViewController() -> BrowseVolunteerViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseVolunteerViewController") as! BrowseVolunteerViewController
        }

        static func instantiateSearchViewController() -> SearchViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("SearchViewController") as! SearchViewController
        }

        static func instantiateBrowseMapViewController() -> BrowseMapViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseMapViewController") as! BrowseMapViewController
        }

        static func instantiateTrainingDetailsViewControllerId() -> TrainingDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("TrainingDetailsViewControllerId") as! TrainingDetailsViewController
        }

        static func instantiateBrowseGridViewController() -> BrowseGridViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseGridViewController") as! BrowseGridViewController
        }

        static func instantiateExploreViewControllerId() -> ExploreViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("ExploreViewControllerId") as! ExploreViewController
        }

        static func instantiateBrowseListViewController() -> BrowseListViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseListViewController") as! BrowseListViewController
        }

        static func instantiateProductDetailsViewControllerId() -> ProductDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("ProductDetailsViewControllerId") as! ProductDetailsViewController
        }

        static func instantiateEmergencyDetailsControllerId() -> EmergencyDetailsController {
            return self.storyboard.instantiateViewControllerWithIdentifier("EmergencyDetailsControllerId") as! EmergencyDetailsController
        }

        static func instantiateVolunteerDetailsViewControllerId() -> VolunteerDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("VolunteerDetailsViewControllerId") as! VolunteerDetailsViewController
        }

        static func instantiateGiveBloodDetailsViewControllerId() -> GiveBloodDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("GiveBloodDetailsViewControllerId") as! GiveBloodDetailsViewController
        }

        static func instantiateMarketDetailsViewControllerId() -> MarketDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MarketDetailsViewControllerId") as! MarketDetailsViewController
        }

        static func instantiateBomaHotelsDetailsViewControllerId() -> BomaHotelsDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BomaHotelsDetailsViewControllerId") as! BomaHotelsDetailsViewController
        }

        static func instantiateEventDetailsViewControllerId() -> EventDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("EventDetailsViewControllerId") as! EventDetailsViewController
        }

        static func instantiatePromotionDetailsViewControllerId() -> PromotionDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PromotionDetailsViewControllerId") as! PromotionDetailsViewController
        }

        static func instantiatePostViewController() -> PostViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PostViewController") as! PostViewController
        }

        static func instantiateMapViewController() -> BrowseViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MapViewController") as! BrowseViewController
        }

        static func instantiateBrowseCommunityNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BrowseCommunityNavigationController") as! UINavigationController
        }

        static func instantiateSettingsNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("SettingsNavigationController") as! UINavigationController
        }

        static func instantiatePeopleNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PeopleNavigationController") as! UINavigationController
        }

        static func instantiatePeopleViewController() -> PeopleContainerViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PeopleViewController") as! PeopleContainerViewController
        }

        static func instantiateUserProfileViewController() -> UserProfileViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("UserProfileViewController") as! UserProfileViewController
        }

        static func instantiateMyProfileNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("MyProfileNavigationController") as! UINavigationController
        }

        static func instantiateCommunityFeedViewController() -> CommunityFeedViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CommunityFeedViewController") as! CommunityFeedViewController
        }

        static func instantiateSettingsViewController() -> SettingsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("SettingsViewController") as! SettingsViewController
        }

        static func instantiateCommunityViewController() -> CommunityViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CommunityViewController") as! CommunityViewController
        }

        static func instantiateCommunityNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CommunityNavigationController") as! UINavigationController
        }

        static func instantiateWalletNavigationController() -> UINavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("WalletNavigationController") as! UINavigationController
        }

        static func instantiateSplashViewController() -> UIViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("SplashViewController")
        }

        static func instantiateWalletViewController() -> WalletViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("WalletViewController") as! WalletViewController
        }

        static func instantiateDonationDetailsViewControllerId() -> DonationDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("DonationDetailsViewControllerId") as! DonationDetailsViewController
        }

        static func instantiateCreateCommunityConversationViewController() -> CreateCommunityConversationViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CreateCommunityConversationViewController") as! CreateCommunityConversationViewController
        }

        static func instantiateCreateUserConversationViewController() -> CreateUserConversationViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CreateUserConversationViewController") as! CreateUserConversationViewController
        }

        static func instantiateBoughtProductDetailsViewControllerId() -> BoughtProductDetailsViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("BoughtProductDetailsViewControllerId") as! BoughtProductDetailsViewController
        }
    }

    struct NewItems: Storyboard {

        static let identifier = "NewItems"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateViewControllerWithIdentifier(identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier(identifier)
        }

        static func instantiateViewController<T: UIViewController where T: IdentifiableProtocol>(type: T.Type) -> T? {
            return self.storyboard.instantiateViewController(type)
        }

        static func instantiateAddPostViewController() -> AddPostViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("AddPostViewController") as! AddPostViewController
        }

        static func instantiateEditProfileViewController() -> EditProfileViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("EditProfileViewController") as! EditProfileViewController
        }

        static func instantiatePostToContainerViewControllerId() -> PostToContainerViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PostToContainerViewControllerId") as! PostToContainerViewController
        }
    }

    struct Onboarding: Storyboard {

        static let identifier = "Onboarding"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateInitialViewController() -> OnboardingNavigationController {
            return self.storyboard.instantiateInitialViewController() as! OnboardingNavigationController
        }

        static func instantiateViewControllerWithIdentifier(identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier(identifier)
        }

        static func instantiateViewController<T: UIViewController where T: IdentifiableProtocol>(type: T.Type) -> T? {
            return self.storyboard.instantiateViewController(type)
        }

        static func instantiatePhoneVerificationController() -> PhoneVerificationViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PhoneVerificationController") as! PhoneVerificationViewController
        }

        static func instantiatePhoneNumberNavigationController() -> OnboardingNavigationController {
            return self.storyboard.instantiateViewControllerWithIdentifier("PhoneNumberNavigationController") as! OnboardingNavigationController
        }

        static func instantiateCallAmbulanceViewController() -> CallAmbulanceViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("CallAmbulanceViewController") as! CallAmbulanceViewController
        }

        static func instantiateAmbulanceSentViewControllerId() -> AmbulanceSentViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("AmbulanceSentViewControllerId") as! AmbulanceSentViewController
        }

        static func instantiateDonateViewController() -> DonateViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("DonateViewController") as! DonateViewController
        }

        static func instantiateSelectPaymentMethodController() -> SelectPaymentMethodController {
            return self.storyboard.instantiateViewControllerWithIdentifier("SelectPaymentMethodController") as! SelectPaymentMethodController
        }

        static func instantiateDonateNotificationViewController() -> DonateNotificationViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("DonateNotificationViewController") as! DonateNotificationViewController
        }

        static func instantiateAmbulanceRequestedViewControllerId() -> AmbulanceRequestedViewController {
            return self.storyboard.instantiateViewControllerWithIdentifier("AmbulanceRequestedViewControllerId") as! AmbulanceRequestedViewController
        }
    }
}

//MARK: - ReusableKind
enum ReusableKind: String, CustomStringConvertible {
    case TableViewCell = "tableViewCell"
    case CollectionViewCell = "collectionViewCell"

    var description: String { return self.rawValue }
}

//MARK: - SegueKind
enum SegueKind: String, CustomStringConvertible {    
    case Relationship = "relationship" 
    case Show = "show"                 
    case Presentation = "presentation" 
    case Embed = "embed"               
    case Unwind = "unwind"             
    case Push = "push"                 
    case Modal = "modal"               
    case Popover = "popover"           
    case Replace = "replace"           
    case Custom = "custom"             

    var description: String { return self.rawValue } 
}

//MARK: - IdentifiableProtocol

public protocol IdentifiableProtocol: Equatable {
    var storyboardIdentifier: String? { get }
}

//MARK: - SegueProtocol

public protocol SegueProtocol {
    var identifier: String? { get }
}

public func ==<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.identifier == rhs.identifier
}

public func ~=<T: SegueProtocol, U: SegueProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.identifier == rhs.identifier
}

public func ==<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {
    return lhs.identifier == rhs
}

public func ~=<T: SegueProtocol>(lhs: T, rhs: String) -> Bool {
    return lhs.identifier == rhs
}

public func ==<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {
    return lhs == rhs.identifier
}

public func ~=<T: SegueProtocol>(lhs: String, rhs: T) -> Bool {
    return lhs == rhs.identifier
}

//MARK: - ReusableViewProtocol
public protocol ReusableViewProtocol: IdentifiableProtocol {
    var viewType: UIView.Type? { get }
}

public func ==<T: ReusableViewProtocol, U: ReusableViewProtocol>(lhs: T, rhs: U) -> Bool {
    return lhs.storyboardIdentifier == rhs.storyboardIdentifier
}

//MARK: - Protocol Implementation
extension UIStoryboardSegue: SegueProtocol {
}

extension UICollectionReusableView: ReusableViewProtocol {
    public var viewType: UIView.Type? { return self.dynamicType }
    public var storyboardIdentifier: String? { return self.reuseIdentifier }
}

extension UITableViewCell: ReusableViewProtocol {
    public var viewType: UIView.Type? { return self.dynamicType }
    public var storyboardIdentifier: String? { return self.reuseIdentifier }
}

//MARK: - UIViewController extension
extension UIViewController {
    func performSegue<T: SegueProtocol>(segue: T, sender: AnyObject?) {
        if let identifier = segue.identifier {
            performSegueWithIdentifier(identifier, sender: sender)
        }
    }

    func performSegue<T: SegueProtocol>(segue: T) {
        performSegue(segue, sender: nil)
    }
}

//MARK: - UICollectionView

extension UICollectionView {

    func dequeueReusableCell<T: ReusableViewProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> UICollectionViewCell? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableCellWithReuseIdentifier(identifier, forIndexPath: forIndexPath)
        }
        return nil
    }

    func registerReusableCell<T: ReusableViewProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {
            registerClass(type, forCellWithReuseIdentifier: identifier)
        }
    }

    func dequeueReusableSupplementaryViewOfKind<T: ReusableViewProtocol>(elementKind: String, withReusable reusable: T, forIndexPath: NSIndexPath!) -> UICollectionReusableView? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableSupplementaryViewOfKind(elementKind, withReuseIdentifier: identifier, forIndexPath: forIndexPath)
        }
        return nil
    }

    func registerReusable<T: ReusableViewProtocol>(reusable: T, forSupplementaryViewOfKind elementKind: String) {
        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {
            registerClass(type, forSupplementaryViewOfKind: elementKind, withReuseIdentifier: identifier)
        }
    }
}
//MARK: - UITableView

extension UITableView {

    func dequeueReusableCell<T: ReusableViewProtocol>(reusable: T, forIndexPath: NSIndexPath!) -> UITableViewCell? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableCellWithIdentifier(identifier, forIndexPath: forIndexPath)
        }
        return nil
    }

    func registerReusableCell<T: ReusableViewProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {
            registerClass(type, forCellReuseIdentifier: identifier)
        }
    }

    func dequeueReusableHeaderFooter<T: ReusableViewProtocol>(reusable: T) -> UITableViewHeaderFooterView? {
        if let identifier = reusable.storyboardIdentifier {
            return dequeueReusableHeaderFooterViewWithIdentifier(identifier)
        }
        return nil
    }

    func registerReusableHeaderFooter<T: ReusableViewProtocol>(reusable: T) {
        if let type = reusable.viewType, identifier = reusable.storyboardIdentifier {
             registerClass(type, forHeaderFooterViewReuseIdentifier: identifier)
        }
    }
}


//MARK: - MainMenuViewController
extension MainMenuViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "MainMenuViewController" }
    static var storyboardIdentifier: String? { return "MainMenuViewController" }
}


//MARK: - SidebarViewController
extension UIStoryboardSegue {
    func selection() -> SidebarViewController.Segue? {
        if let identifier = self.identifier {
            return SidebarViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension SidebarViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case DrawerSegue = "DrawerSegue"
        case ShowGridBrowse = "ShowGridBrowse"
        case ShowMessagesList = "ShowMessagesList"
        case ShowFilters = "ShowFilters"
        case ShowCommunities = "ShowCommunities"
        case ShowSettings = "ShowSettings"
        case ShowMyProfile = "ShowMyProfile"
        case ShowPeople = "ShowPeople"
        case ShowWallet = "ShowWallet"
        case ShowSplash = "ShowSplash"
        case ShowBrowse = "ShowBrowse"
        case ShowVolunteers = "ShowVolunteers"

        var kind: SegueKind? {
            switch (self) {
            case DrawerSegue:
                return SegueKind(rawValue: "custom")
            case ShowGridBrowse:
                return SegueKind(rawValue: "custom")
            case ShowMessagesList:
                return SegueKind(rawValue: "custom")
            case ShowFilters:
                return SegueKind(rawValue: "presentation")
            case ShowCommunities:
                return SegueKind(rawValue: "custom")
            case ShowSettings:
                return SegueKind(rawValue: "custom")
            case ShowMyProfile:
                return SegueKind(rawValue: "custom")
            case ShowPeople:
                return SegueKind(rawValue: "custom")
            case ShowWallet:
                return SegueKind(rawValue: "custom")
            case ShowSplash:
                return SegueKind(rawValue: "custom")
            case ShowBrowse:
                return SegueKind(rawValue: "custom")
            case ShowVolunteers:
                return SegueKind(rawValue: "custom")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case DrawerSegue:
                return MainMenuViewController.self
            case ShowGridBrowse:
                return UINavigationController.self
            case ShowMessagesList:
                return UINavigationController.self
            case ShowFilters:
                return UINavigationController.self
            case ShowCommunities:
                return UINavigationController.self
            case ShowSettings:
                return UINavigationController.self
            case ShowMyProfile:
                return UINavigationController.self
            case ShowPeople:
                return UINavigationController.self
            case ShowWallet:
                return UINavigationController.self
            case ShowSplash:
                return UIViewController.self
            case ShowBrowse:
                return UINavigationController.self
            case ShowVolunteers:
                return UINavigationController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - MessagesListViewController
extension UIStoryboardSegue {
    func selection() -> MessagesListViewController.Segue? {
        if let identifier = self.identifier {
            return MessagesListViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension MessagesListViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case newMessage = "newMessage"

        var kind: SegueKind? {
            switch (self) {
            case newMessage:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case newMessage:
                return CreateConversationContainerViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - CreateConversationContainerViewController
extension CreateConversationContainerViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CreateConversationContainerViewController" }
    static var storyboardIdentifier: String? { return "CreateConversationContainerViewController" }
}

//MARK: - BrowseCommunityViewController
extension UIStoryboardSegue {
    func selection() -> BrowseCommunityViewController.Segue? {
        if let identifier = self.identifier {
            return BrowseCommunityViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension BrowseCommunityViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BrowseCommunityViewController" }
    static var storyboardIdentifier: String? { return "BrowseCommunityViewController" }
}

extension BrowseCommunityViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case showVolunteerDetailsViewController = "showVolunteerDetailsViewController"

        var kind: SegueKind? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return VolunteerDetailsViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - BrowseVolunteerViewController

extension BrowseVolunteerViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case showVolunteerDetailsViewController = "showVolunteerDetailsViewController"

        var kind: SegueKind? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return VolunteerDetailsViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - SearchViewController
extension SearchViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "SearchViewController" }
    static var storyboardIdentifier: String? { return "SearchViewController" }
}


//MARK: - BrowseMapViewController
extension BrowseMapViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BrowseMapViewController" }
    static var storyboardIdentifier: String? { return "BrowseMapViewController" }
}


//MARK: - TrainingDetailsViewController
extension UIStoryboardSegue {
    func selection() -> TrainingDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return TrainingDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension TrainingDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "TrainingDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "TrainingDetailsViewControllerId" }
}

extension TrainingDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case showUserProfile = "showUserProfile"

        var kind: SegueKind? {
            switch (self) {
            case showUserProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case showUserProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - BrowseGridViewController
extension BrowseGridViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BrowseGridViewController" }
    static var storyboardIdentifier: String? { return "BrowseGridViewController" }
}


//MARK: - ExploreViewController
extension ExploreViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "ExploreViewControllerId" }
    static var storyboardIdentifier: String? { return "ExploreViewControllerId" }
}


//MARK: - BrowseListViewController
extension BrowseListViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BrowseListViewController" }
    static var storyboardIdentifier: String? { return "BrowseListViewController" }
}


//MARK: - ProductOrderViewController

//MARK: - ProductDetailsViewController
extension UIStoryboardSegue {
    func selection() -> ProductDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return ProductDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension ProductDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "ProductDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "ProductDetailsViewControllerId" }
}

extension ProductDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowProductInventory = "ShowProductInventory"
        case ShowSellerProfile = "ShowSellerProfile"
        case ShowBuyScreen = "ShowBuyScreen"

        var kind: SegueKind? {
            switch (self) {
            case ShowProductInventory:
                return SegueKind(rawValue: "show")
            case ShowSellerProfile:
                return SegueKind(rawValue: "show")
            case ShowBuyScreen:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowProductInventory:
                return ProductInventoryViewController.self
            case ShowSellerProfile:
                return UserProfileViewController.self
            case ShowBuyScreen:
                return ProductOrderViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - EmergencyDetailsController
extension UIStoryboardSegue {
    func selection() -> EmergencyDetailsController.Segue? {
        if let identifier = self.identifier {
            return EmergencyDetailsController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension EmergencyDetailsController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "EmergencyDetailsControllerId" }
    static var storyboardIdentifier: String? { return "EmergencyDetailsControllerId" }
}

extension EmergencyDetailsController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowSellerProfile = "ShowSellerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowSellerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowSellerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - VolunteerDetailsViewController
extension UIStoryboardSegue {
    func selection() -> VolunteerDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return VolunteerDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension VolunteerDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "VolunteerDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "VolunteerDetailsViewControllerId" }
}

extension VolunteerDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowOrganizerProfile = "ShowOrganizerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowOrganizerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowOrganizerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - GiveBloodDetailsViewController
extension UIStoryboardSegue {
    func selection() -> GiveBloodDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return GiveBloodDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension GiveBloodDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "GiveBloodDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "GiveBloodDetailsViewControllerId" }
}

extension GiveBloodDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowOrganizerProfile = "ShowOrganizerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowOrganizerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowOrganizerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - MarketDetailsViewController
extension UIStoryboardSegue {
    func selection() -> MarketDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return MarketDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension MarketDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "MarketDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "MarketDetailsViewControllerId" }
}

extension MarketDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowOrganizerProfile = "ShowOrganizerProfile"
        case ShowBuyScreen = "ShowBuyScreen"

        var kind: SegueKind? {
            switch (self) {
            case ShowOrganizerProfile:
                return SegueKind(rawValue: "show")
            case ShowBuyScreen:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowOrganizerProfile:
                return UserProfileViewController.self
            case ShowBuyScreen:
                return ProductOrderViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - BomaHotelsDetailsViewController
extension UIStoryboardSegue {
    func selection() -> BomaHotelsDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return BomaHotelsDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension BomaHotelsDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BomaHotelsDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "BomaHotelsDetailsViewControllerId" }
}

extension BomaHotelsDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowOrganizerProfile = "ShowOrganizerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowOrganizerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowOrganizerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - EventDetailsViewController
extension UIStoryboardSegue {
    func selection() -> EventDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return EventDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension EventDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "EventDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "EventDetailsViewControllerId" }
}

extension EventDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowOrganizerProfile = "ShowOrganizerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowOrganizerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowOrganizerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - PromotionDetailsViewController
extension UIStoryboardSegue {
    func selection() -> PromotionDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return PromotionDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension PromotionDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PromotionDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "PromotionDetailsViewControllerId" }
}

extension PromotionDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowSellerProfile = "ShowSellerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowSellerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowSellerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - ProductInventoryViewController
extension UIStoryboardSegue {
    func selection() -> ProductInventoryViewController.Segue? {
        if let identifier = self.identifier {
            return ProductInventoryViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension ProductInventoryViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowProductDetails = "ShowProductDetails"

        var kind: SegueKind? {
            switch (self) {
            case ShowProductDetails:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowProductDetails:
                return ProductDetailsViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - PostViewController
extension UIStoryboardSegue {
    func selection() -> PostViewController.Segue? {
        if let identifier = self.identifier {
            return PostViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension PostViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PostViewController" }
    static var storyboardIdentifier: String? { return "PostViewController" }
}

extension PostViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowUserProfile = "ShowUserProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowUserProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowUserProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - BrowseMainGridController

//MARK: - BrowseViewController
extension UIStoryboardSegue {
    func selection() -> BrowseViewController.Segue? {
        if let identifier = self.identifier {
            return BrowseViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension BrowseViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "MapViewController" }
    static var storyboardIdentifier: String? { return "MapViewController" }
}

extension BrowseViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowProductDetails = "ShowProductDetails"
        case ShowEventDetails = "ShowEventDetails"
        case ShowPromotionDetails = "ShowPromotionDetails"
        case ShowPost = "ShowPost"

        var kind: SegueKind? {
            switch (self) {
            case ShowProductDetails:
                return SegueKind(rawValue: "show")
            case ShowEventDetails:
                return SegueKind(rawValue: "show")
            case ShowPromotionDetails:
                return SegueKind(rawValue: "show")
            case ShowPost:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowProductDetails:
                return ProductDetailsViewController.self
            case ShowEventDetails:
                return EventDetailsViewController.self
            case ShowPromotionDetails:
                return PromotionDetailsViewController.self
            case ShowPost:
                return PostViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - PeopleContainerViewController
extension UIStoryboardSegue {
    func selection() -> PeopleContainerViewController.Segue? {
        if let identifier = self.identifier {
            return PeopleContainerViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension PeopleContainerViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PeopleViewController" }
    static var storyboardIdentifier: String? { return "PeopleViewController" }
}

extension PeopleContainerViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowUserProfile = "ShowUserProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowUserProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowUserProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - UserProfileViewController
extension UserProfileViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "UserProfileViewController" }
    static var storyboardIdentifier: String? { return "UserProfileViewController" }
}


//MARK: - CommunityFeedViewController
extension UIStoryboardSegue {
    func selection() -> CommunityFeedViewController.Segue? {
        if let identifier = self.identifier {
            return CommunityFeedViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension CommunityFeedViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CommunityFeedViewController" }
    static var storyboardIdentifier: String? { return "CommunityFeedViewController" }
}

extension CommunityFeedViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case showVolunteerDetailsViewController = "showVolunteerDetailsViewController"

        var kind: SegueKind? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case showVolunteerDetailsViewController:
                return VolunteerDetailsViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - SettingsViewController
extension SettingsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "SettingsViewController" }
    static var storyboardIdentifier: String? { return "SettingsViewController" }
}


//MARK: - CommunityViewController
extension CommunityViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CommunityViewController" }
    static var storyboardIdentifier: String? { return "CommunityViewController" }
}


//MARK: - WalletViewController
extension WalletViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "WalletViewController" }
    static var storyboardIdentifier: String? { return "WalletViewController" }
}


//MARK: - DonationDetailsViewController
extension DonationDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "DonationDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "DonationDetailsViewControllerId" }
}


//MARK: - CreateCommunityConversationViewController
extension CreateCommunityConversationViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CreateCommunityConversationViewController" }
    static var storyboardIdentifier: String? { return "CreateCommunityConversationViewController" }
}


//MARK: - CreateUserConversationViewController
extension CreateUserConversationViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CreateUserConversationViewController" }
    static var storyboardIdentifier: String? { return "CreateUserConversationViewController" }
}


//MARK: - CreateConversationViewController

//MARK: - BoughtProductDetailsViewController
extension UIStoryboardSegue {
    func selection() -> BoughtProductDetailsViewController.Segue? {
        if let identifier = self.identifier {
            return BoughtProductDetailsViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension BoughtProductDetailsViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "BoughtProductDetailsViewControllerId" }
    static var storyboardIdentifier: String? { return "BoughtProductDetailsViewControllerId" }
}

extension BoughtProductDetailsViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowSellerProfile = "ShowSellerProfile"

        var kind: SegueKind? {
            switch (self) {
            case ShowSellerProfile:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ShowSellerProfile:
                return UserProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - AddPostViewController
extension AddPostViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "AddPostViewController" }
    static var storyboardIdentifier: String? { return "AddPostViewController" }
}


//MARK: - EditProfileViewController
extension UIStoryboardSegue {
    func selection() -> EditProfileViewController.Segue? {
        if let identifier = self.identifier {
            return EditProfileViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension EditProfileViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "EditProfileViewController" }
    static var storyboardIdentifier: String? { return "EditProfileViewController" }
}

extension EditProfileViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case Close = "Close"

        var kind: SegueKind? {
            switch (self) {
            case Close:
                return SegueKind(rawValue: "unwind")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - PostToContainerViewController
extension PostToContainerViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PostToContainerViewControllerId" }
    static var storyboardIdentifier: String? { return "PostToContainerViewControllerId" }
}


//MARK: - OnboardingNavigationController

//MARK: - PhoneNumberViewController
extension UIStoryboardSegue {
    func selection() -> PhoneNumberViewController.Segue? {
        if let identifier = self.identifier {
            return PhoneNumberViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension PhoneNumberViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case PhoneNumberSegueId = "PhoneNumberSegueId"

        var kind: SegueKind? {
            switch (self) {
            case PhoneNumberSegueId:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case PhoneNumberSegueId:
                return PhoneVerificationViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - PhoneVerificationViewController
extension UIStoryboardSegue {
    func selection() -> PhoneVerificationViewController.Segue? {
        if let identifier = self.identifier {
            return PhoneVerificationViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension PhoneVerificationViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PhoneVerificationController" }
    static var storyboardIdentifier: String? { return "PhoneVerificationController" }
}

extension PhoneVerificationViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ProfileSegueId = "ProfileSegueId"

        var kind: SegueKind? {
            switch (self) {
            case ProfileSegueId:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case ProfileSegueId:
                return EditProfileViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - EditProfileViewController

//MARK: - OnboardingNavigationController
extension OnboardingNavigationController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "PhoneNumberNavigationController" }
    static var storyboardIdentifier: String? { return "PhoneNumberNavigationController" }
}


//MARK: - CallAmbulanceViewController
extension UIStoryboardSegue {
    func selection() -> CallAmbulanceViewController.Segue? {
        if let identifier = self.identifier {
            return CallAmbulanceViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension CallAmbulanceViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "CallAmbulanceViewController" }
    static var storyboardIdentifier: String? { return "CallAmbulanceViewController" }
}

extension CallAmbulanceViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case AmbulanceRequestedSegueId = "AmbulanceRequestedSegueId"

        var kind: SegueKind? {
            switch (self) {
            case AmbulanceRequestedSegueId:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case AmbulanceRequestedSegueId:
                return AmbulanceRequestedViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - AmbulanceSentViewController
extension AmbulanceSentViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "AmbulanceSentViewControllerId" }
    static var storyboardIdentifier: String? { return "AmbulanceSentViewControllerId" }
}


//MARK: - DonateViewController
extension UIStoryboardSegue {
    func selection() -> DonateViewController.Segue? {
        if let identifier = self.identifier {
            return DonateViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension DonateViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "DonateViewController" }
    static var storyboardIdentifier: String? { return "DonateViewController" }
}

extension DonateViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case ShowBraintree = "ShowBraintree"
        case ShowMpesa = "ShowMpesa"
        case PaymentCompleted = "PaymentCompleted"

        var kind: SegueKind? {
            switch (self) {
            case ShowBraintree:
                return SegueKind(rawValue: "show")
            case ShowMpesa:
                return SegueKind(rawValue: "show")
            case PaymentCompleted:
                return SegueKind(rawValue: "show")
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

//MARK: - SelectPaymentMethodController
extension SelectPaymentMethodController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "SelectPaymentMethodController" }
    static var storyboardIdentifier: String? { return "SelectPaymentMethodController" }
}


//MARK: - DonateNotificationViewController
extension DonateNotificationViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "DonateNotificationViewController" }
    static var storyboardIdentifier: String? { return "DonateNotificationViewController" }
}


//MARK: - AmbulanceRequestedViewController
extension UIStoryboardSegue {
    func selection() -> AmbulanceRequestedViewController.Segue? {
        if let identifier = self.identifier {
            return AmbulanceRequestedViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension AmbulanceRequestedViewController: IdentifiableProtocol { 
    var storyboardIdentifier: String? { return "AmbulanceRequestedViewControllerId" }
    static var storyboardIdentifier: String? { return "AmbulanceRequestedViewControllerId" }
}

extension AmbulanceRequestedViewController { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case AmbulanceSentSegueId = "AmbulanceSentSegueId"

        var kind: SegueKind? {
            switch (self) {
            case AmbulanceSentSegueId:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            case AmbulanceSentSegueId:
                return AmbulanceSentViewController.self
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}



